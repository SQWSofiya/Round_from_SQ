import os
import subprocess
import uuid
import json
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
from contextlib import suppress

REQUIRED_CHANNEL = "@sqw_factory"

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")

ADMIN_ID = 230479313
USERS_FILE = "users.json"

def load_users():
    if not os.path.exists(USERS_FILE):
        return set()
    try:
        with open(USERS_FILE, "r") as f:
            return set(json.load(f))
    except Exception:
        return set()

def save_users(user_ids):
    with open(USERS_FILE, "w") as f:
        json.dump(list(user_ids), f)

async def is_user_subscribed(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users = load_users()

    if user_id not in users:
        users.add(user_id)
        save_users(users)

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ûï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –í—Å–µ–≥–æ: {len(users)}"
        )

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–µ–≤—Ä–∞—â–∞—é —Ç–≤–æ–∏ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–∫–∏ üé•‚ú®\n\n"
        "üîπ –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 60 —Å–µ–∫—É–Ω–¥).\n"
        "üîπ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª @sqw_factory.\n"
        "üîπ –ü–æ–ª—É—á–∏—à—å Telegram-–∫—Ä—É–∂–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –∑–≤—É–∫–æ–º!\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @SQWSofiya üí¨"
    )

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    video = update.message.video

    if video.duration and video.duration > 60:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥.")
        return

    if not await is_user_subscribed(user.id, context):
        await update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {REQUIRED_CHANNEL}, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üòä"
        )
        return

    processing_message = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    input_path = f"{uuid.uuid4()}.mp4"
    output_path = f"{uuid.uuid4()}.mp4"

    try:
        file = await video.get_file()
        await file.download_to_drive(input_path)

        subprocess.run([
            "ffmpeg", "-i", input_path,
            "-vf", "crop='min(in_w\\,in_h)':'min(in_w\\,in_h)',scale=640:640",
            "-c:v", "libx264", "-preset", "fast", "-crf", "20",
            "-c:a", "aac", "-b:a", "128k",
            "-t", "60", "-y", output_path
        ], check=True)

        with open(output_path, "rb") as video_note:
            await update.message.reply_video_note(video_note)

    except subprocess.CalledProcessError as e:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω–æ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ –∏ –¥–ª–∏—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥."
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:\n"
                f"ID: {user.id}\n"
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )
        )

    finally:
        with suppress(Exception):
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=processing_message.message_id)
        with suppress(Exception):
            os.remove(input_path)
        with suppress(Exception):
            os.remove(output_path)

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video))

    app.run_polling()

if __name__ == "__main__":
    import threading
    import http.server
    import socketserver

    def run_dummy_server():
        port = int(os.environ.get("PORT", 10000))
        handler = http.server.SimpleHTTPRequestHandler
        with socketserver.TCPServer(("", port), handler) as httpd:
            httpd.serve_forever()

    threading.Thread(target=run_dummy_server, daemon=True).start()

    main()
